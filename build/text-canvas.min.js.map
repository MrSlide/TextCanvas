{"version":3,"sources":["text-canvas.js"],"names":["global","factory","exports","module","define","amd","TextCanvas","this","_classCallCheck","instance","Constructor","TypeError","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","text","style","undefined","resolution","_style","fontFamily","fontStyle","fontWeight","fontVariant","fontSize","textAlign","textBaseline","textColor","wordWrap","createCanvas","value","_canvas","document","createElement","_ctx","getContext","scale","_resolution","font","fillStyle","forcedLines","_text","split","spaceMeasure","measureText","lines","lineHeight","currentLine","width","height","lineWords","wordMeasure","j","trim","push","maxWith","maxHeight","Math","max","ceil","applyStyles","createLines","dimensions","getCanvasDimensions","adjustment","clearRect","x","y","fillText","get","set","constructor","name","RangeError","Number","isNaN","window","devicePixelRatio","parseFloat","sign"],"mappings":"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","file":"text-canvas.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.TextCanvas = factory());\n}(this, (function () { 'use strict';\n\n/**\n * @name TextCanas\n * @desc Renders wrapped text to a 2D canvas element.\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0-alpha\n * @license MIT\n */\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TextCanvas = function () {\n  function TextCanvas(text) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var resolution = arguments[2];\n\n    _classCallCheck(this, TextCanvas);\n\n    this._style = {\n      fontFamily: 'sans-serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontVariant: 'normal',\n      fontSize: 16,\n      textAlign: 'left',\n      textBaseline: 'bottom',\n      textColor: 'black',\n      wordWrap: false\n    };\n\n    this.text = text;\n    this.style = style;\n    this.resolution = resolution;\n\n    this.createCanvas();\n  }\n\n  _createClass(TextCanvas, [{\n    key: 'createCanvas',\n    value: function createCanvas() {\n      this._canvas = document.createElement('canvas');\n      this._ctx = this._canvas.getContext('2d');\n\n      return this._canvas;\n    }\n  }, {\n    key: 'applyStyles',\n    value: function applyStyles() {\n      this._ctx.scale(this._resolution, this._resolution);\n\n      var style = this._style;\n\n      this._ctx.font = style.fontStyle + ' ' + style.fontVariant + ' ' + style.fontWeight + ' ' + style.fontSize + 'px ' + style.fontFamily;\n      this._ctx.textAlign = style.textAlign;\n      this._ctx.textBaseline = style.textBaseline;\n      this._ctx.fillStyle = style.textColor;\n    }\n  }, {\n    key: 'createLines',\n    value: function createLines() {\n      var forcedLines = this._text.split('\\n');\n\n      if (!this._style.wordWrap) {\n        return forcedLines;\n      }\n\n      var spaceMeasure = this._ctx.measureText(' ');\n      var lines = [];\n      var lineHeight = this._style.lineHeight || this._style.fontSize * 1.2;\n      var currentLine = {\n        text: '',\n        width: 0,\n        height: lineHeight\n      };\n      var lineWords = void 0;\n      var wordMeasure = void 0;\n\n      for (var i = 0; i < forcedLines.length; i++) {\n        lineWords = forcedLines[i].split(' ');\n\n        for (var j = 0; j < lineWords.length; j++) {\n          wordMeasure = this._ctx.measureText(lineWords[j]);\n\n          if (currentLine.width + wordMeasure.width > this._style.wordWrap) {\n            if (j && i) {\n              currentLine.text = currentLine.text.trim();\n              currentLine.width -= spaceMeasure.width;\n\n              lines.push(currentLine);\n\n              currentLine = {\n                text: '',\n                width: 0,\n                height: lineHeight\n              };\n            }\n\n            currentLine.width = wordMeasure.width + spaceMeasure.width;\n            currentLine.text = lineWords[j] + ' ';\n          } else {\n            currentLine.width += wordMeasure.width + spaceMeasure.width;\n            currentLine.text += lineWords[j] + ' ';\n          }\n        }\n\n        currentLine.text = currentLine.text.trim();\n        currentLine.width -= spaceMeasure.width;\n\n        lines.push(currentLine);\n\n        currentLine = {\n          text: '',\n          width: 0,\n          height: lineHeight\n        };\n      }\n\n      return lines;\n    }\n  }, {\n    key: 'getCanvasDimensions',\n    value: function getCanvasDimensions(lines) {\n      var maxWith = 0;\n      var maxHeight = 0;\n\n      for (var i = 0; i < lines.length; i++) {\n        maxWith = Math.max(maxWith, lines[i].width);\n        maxHeight += lines[i].height;\n      }\n\n      return {\n        width: Math.ceil(maxWith),\n        height: Math.ceil(maxHeight)\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      this.applyStyles();\n\n      var lines = this.createLines();\n      var dimensions = this.getCanvasDimensions(lines);\n\n      this._canvas.width = (dimensions.width + dimensions.adjustment) * this._resolution;\n      this._canvas.height = (dimensions.height + dimensions.adjustment) * this._resolution;\n\n      this.applyStyles();\n\n      this._ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n      var x = 0;\n      var y = 0;\n\n      if (this._style.textAlign === 'center') {\n        x = dimensions.width / 2;\n      } else if (this._style.textAlign === 'right') {\n        x = dimensions.width;\n      }\n\n      for (var i = 0; i < lines.length; i++) {\n        y += lines[i].height;\n        this._ctx.fillText(lines[i].text, x, y);\n      }\n\n      return this._canvas;\n    }\n  }, {\n    key: 'text',\n    get: function get() {\n      return this._text;\n    },\n    set: function set(value) {\n      if (typeof value !== 'string') {\n        throw new TypeError(this.constructor.name + ': \\'text\\' must be a string.');\n      }\n\n      value = value.trim();\n\n      if (!value) {\n        throw new RangeError(this.constructor.name + ': \\'text\\' is empty.');\n      }\n\n      this._text = value;\n      return this._text;\n    }\n  }, {\n    key: 'style',\n    get: function get() {\n      return this._style;\n    },\n    set: function set(value) {\n      this._style = _extends(this._style, value);\n\n      return this._style;\n    }\n  }, {\n    key: 'resolution',\n    get: function get() {\n      return this._resolution;\n    },\n    set: function set(value) {\n      if (value !== void 0 && Number.isNaN(value)) {\n        throw new TypeError(this.constructor.name + ': \\'resolution\\' must be a number.');\n      }\n\n      if (value === 0) {\n        throw new RangeError(this.constructor.name + ': \\'resolution\\' must be greater than 0.');\n      }\n\n      value = value || window.devicePixelRatio || 1;\n      value = parseFloat(value);\n\n      if (Math.sign(value) === -1) {\n        throw new RangeError(this.constructor.name + ': \\'resolution\\' must be a positive number.');\n      }\n\n      this._resolution = value;\n\n      return this._resolution;\n    }\n  }]);\n\n  return TextCanvas;\n}();\n\nreturn TextCanvas;\n\n})));\n//# sourceMappingURL=text-canvas.js.map\n"]}