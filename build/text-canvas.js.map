{"version":3,"file":null,"sources":["../src/text-canvas.js"],"sourcesContent":["/**\n * @typedef {Object} TextStyle\n * @property {String} [fontFamily='sans-serif'] - The font family of the text.\n * @property {String} [fontStyle='normal'] - The font style. The possible values are `normal`, `italic` or `oblique`.\n * @property {String|Number} [fontWeight='normal'] - The font weight. The possible values are `normal`, `bold`, or a multiple of 100 from 100 to 900.\n * @property {String} [fontVariant='normal'] - The font variant. The possible values are `normal` or `small-caps`.\n * @property {String} [fontSize='16px'] - The font size. Can be a value in `px` or `pt`.\n * @property {String} [textAlign='left'] - The alignment of the text. The possible values are `left`, `center` or `right`.\n * @property {String} [textBaseline='ideographic'] - The baseline of the text. The possible values are `top`, `hanging`, `middle`, `alphabetic`, `ideographic` or `bottom`.\n * @property {String} [textColor='black'] - The text colour. It can be any CSS colour string.\n * @property {Number} [shadowBlur=0] - The text blur amount.\n * @property {Number} [shadowOffsetX=0] - The horizontal offset of the text blue. Positive values will offset the shadow to the right, and negative values will offset the shadow to the left.\n * @property {String} [shadowColor='black'] - The colour of the text shadow. It can be any CSS colour string.\n * @property {Boolean|Number} [wordWrap=false] - Set to `false` to draw all the text in a single line. Setting it to a number will define the maximum line width in pixels.\n */\n\n/**\n * Draws text on a canvas so that text can be used as a texture on a WebGL context or as a layer on another 2D context.\n *\n * @public\n * @class\n */\nexport default class TextCanvas {\n  /**\n   * Create an instance of a text canvas.\n   *\n   * @public\n   * @param {String} text - The text to be drawn.\n   * @param {TextStyle} [textStyle={}] - The text style configuration.\n   * @param {Number} [resolution=window.devicePixelRation] - The resolution of the drawn text.\n   * @return {TextCanvas}\n   */\n  constructor (text, textStyle = {}, resolution) {\n    this.text = text\n    this.textStyle = textStyle\n\n    this.createCanvas()\n  }\n\n  /**\n   * Get the default text style configuration.\n   *\n   * @private\n   * @type {TextStyle}\n   */\n  get defaultTextStyle () {\n    return {\n      fontFamily: 'sans-serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontVariant: 'normal',\n      fontSize: '16px',\n      textAlign: 'left',\n      textBaseline: 'ideographic',\n      textColor: 'black',\n      shadowBlur: 0,\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      shadowColor: 'black',\n      wordWrap: false,\n      wordBreak: false\n    }\n  }\n\n  /**\n   * Get the text that will be used the next time the text is drawn.\n   *\n   * @public\n   * @type {String}\n   */\n  get text () {\n    return this._text\n  }\n\n  /**\n   * Change the text to be drawn.\n   *\n   * @public\n   * @type {String}\n   * @throws {TypeError} - If the value is not a string.\n   * @throws {RangeError} If the text is empty.\n   */\n  set text (value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`${this.constructor.name}: 'text' must be a string.`)\n    }\n\n    value = value.trim()\n\n    if (!value) {\n      throw new RangeError(`${this.constructor.name}: 'text' is empty.`)\n    }\n\n    this._text = value\n    return this._text\n  }\n\n  /**\n   * Get the text style configuration that will be used the next time the text is drawn.\n   *\n   * @public\n   * @type {TextStyle}\n   */\n  get textStyle () {\n    return this._style\n  }\n\n  /**\n   * Change the text style configuration.\n   *\n   * @public\n   * @type {TextStyle} - The new text style configuration\n   */\n  set textStyle (value = {}) {\n    this._style = Object.assign({}, this.defaultTextStyle, value)\n\n    return this._style\n  }\n\n  /**\n   * Get the text resolution that will be used the next time the text is drawn.\n   *\n   * @public\n   * @type {Number}\n   */\n  get resolution () {\n    return this._resolution\n  }\n\n  /**\n   * Set the resolution of the text.\n   *\n   * @public\n   * @type {Number} - The resolution of the text. Defaults to the device pixel ratio.\n   * @throws {TypeError} - If the value is not a number.\n   * @throws {RangeError} - If the value is 0.\n   * @throws {RangeError} - If the value is not a positive number.\n   */\n  set resolution (value) {\n    if (value !== void 0 && Number.isNaN(value)) {\n      throw new TypeError(`${this.constructor.name}: 'resolution' must be a number.`)\n    }\n\n    if (value === 0) {\n      throw new RangeError(`${this.constructor.name}: 'resolution' must be greater than 0.`)\n    }\n\n    value = value || window.devicePixelRatio || 1\n    value = parseFloat(value)\n\n    if (Math.sign(value) === -1) {\n      throw new RangeError(`${this.constructor.name}: 'resolution' must be a positive number.`)\n    }\n\n    this._resolution = value\n\n    return this._resolution\n  }\n\n  /**\n   * Create the canvas element where the text will be drawn.\n   *\n   * @private\n   * @return {HTMLCanvasElement}\n   */\n  createCanvas () {\n    this._canvas = document.createElement('canvas')\n    this._ctx = this._canvas.getContext('2d')\n\n    return this._canvas\n  }\n\n  applyTextStyles () {\n    const style = this._style\n\n    this._ctx.font = `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${style.fontSize} ${style.fontFamily}`\n    this._ctx.textAlign = style.textAlign\n    this._ctx.textBaseline = style.textBaseline\n    this._ctx.fillStyle = style.textColor\n    this._ctx.shadowBlur = style.shadowBlur\n    this._ctx.shadowOffsetX = style.shadowOffsetX\n    this._ctx.shadowOffsetY = style.shadowOffsetY\n    this._ctx.shadowColor = style.shadowColor\n  }\n\n  createTextLines () {\n    const forcedLines = this._text.split('\\n')\n\n    if (!this._style.wordWrap) {\n      return forcedLines\n    }\n\n    const spaceMeasure = this._ctx.measureText(' ')\n    const lines = []\n    let lineWidth = 0\n    let lineContents = ''\n\n    for (let i = 0; i < forcedLines.length; i++) {\n      const lineWords = forcedLines.split(' ')\n\n      for (let j = 0; j < lineWords.length; j++) {\n        const wordMeasure = this._ctx.measureText(lineWords[j])\n\n        if (lineWidth + wordMeasure.width > this._style.wordWrap) {\n          if (j) {\n            lines.push(lineContents.trim())\n          }\n          lineWidth = wordMeasure.width\n          lineContents = lineWords[j]\n        } else {\n          lineWidth += wordMeasure.width + spaceMeasure.width\n          lineContents += lineWords[j] + ' '\n        }\n      }\n\n      lines.push(lineContents.trim())\n      lineWidth = 0\n      lineContents = ''\n    }\n  }\n}\n"],"names":["TextCanvas","text","textStyle","resolution","createCanvas","_canvas","document","createElement","_ctx","getContext","style","_style","font","fontStyle","fontVariant","fontWeight","fontSize","fontFamily","textAlign","textBaseline","fillStyle","textColor","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","forcedLines","_text","split","wordWrap","spaceMeasure","measureText","lines","lineWidth","lineContents","i","length","lineWords","j","wordMeasure","width","push","trim","value","TypeError","constructor","name","RangeError","defaultTextStyle","_resolution","Number","isNaN","window","devicePixelRatio","parseFloat","Math","sign"],"mappings":"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"}