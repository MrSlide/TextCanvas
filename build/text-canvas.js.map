{"version":3,"file":null,"sources":["../src/text-canvas.js"],"sourcesContent":["'use strict'\n\n/**\n * @name TextCanas\n * @desc Renders wrapped text to a 2D canvas element.\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0-alpha\n * @license MIT\n */\n\n/**\n * @typedef {Object} TextStyle\n * @property {String} [fontFamily='sans-serif'] - The font family of the text.\n * @property {String} [fontStyle='normal'] - The font style. The possible values are `normal`, `italic` or `oblique`.\n * @property {String|Number} [fontWeight='normal'] - The font weight. The possible values are `normal`, `bold`, or a multiple of 100 from 100 to 900.\n * @property {String} [fontVariant='normal'] - The font variant. The possible values are `normal` or `small-caps`.\n * @property {Number} [fontSize=16] - The font size in pixels.\n * @property {Number} [lineHeight=fontSize*1.2] - The height of each line, in pixels.\n * @property {String} [textAlign='left'] - The alignment of the text. The possible values are `left`, `center` or `right`.\n * @property {String} [textBaseline='bottom'] - The baseline of the text. The possible values are `top`, `hanging`, `middle`, `alphabetic`, `ideographic` or `bottom`.\n * @property {String} [textColor='black'] - The text colour. It can be any CSS colour string.\n * @property {Boolean|Number} [wordWrap=false] - Set to `false` to draw all the text in a single line. Setting it to a number will define the maximum line width in pixels.\n */\n\n/**\n * @typedef {Object} LineConfig\n * @property {String} text - The text to render on the line.\n * @property {Number} width - The width of the line.\n * @property {Number} height - The height of the line.\n */\n\n/**\n * Draws text on a canvas so that text can be used as a texture on a WebGL context or as a layer on another 2D context.\n *\n * @public\n * @class\n */\nexport default class TextCanvas {\n  /**\n   * Create an instance of a text canvas.\n   *\n   * @public\n   * @param {String} text - The text to be drawn.\n   * @param {TextStyle} [style={}] - The text style configuration.\n   * @param {Number} [resolution=window.devicePixelRation] - The resolution of the drawn text.\n   * @return {TextCanvas}\n   */\n  constructor (text, style = {}, resolution) {\n    this._style = {\n      fontFamily: 'sans-serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontVariant: 'normal',\n      fontSize: 16,\n      textAlign: 'left',\n      textBaseline: 'bottom',\n      textColor: 'black',\n      wordWrap: false\n    }\n\n    this.text = text\n    this.style = style\n    this.resolution = resolution\n\n    this.createCanvas()\n  }\n\n  /**\n   * Get the text that will be used the next time the text is drawn.\n   *\n   * @public\n   * @type {String}\n   */\n  get text () {\n    return this._text\n  }\n\n  /**\n   * Change the text to be drawn.\n   *\n   * @public\n   * @type {String}\n   * @throws {TypeError} - If the value is not a string.\n   * @throws {RangeError} If the text is empty.\n   */\n  set text (value) {\n    if (typeof value !== 'string') {\n      throw new TypeError(`${this.constructor.name}: 'text' must be a string.`)\n    }\n\n    value = value.trim()\n\n    if (!value) {\n      throw new RangeError(`${this.constructor.name}: 'text' is empty.`)\n    }\n\n    this._text = value\n    return this._text\n  }\n\n  /**\n   * Get the text style configuration that will be used the next time the text is drawn.\n   *\n   * @public\n   * @type {TextStyle}\n   */\n  get style () {\n    return this._style\n  }\n\n  /**\n   * Change the text style configuration.\n   *\n   * @public\n   * @type {TextStyle} - The new text style configuration\n   */\n  set style (value) {\n    this._style = Object.assign(this._style, value)\n\n    return this._style\n  }\n\n  /**\n   * Get the text resolution that will be used the next time the text is drawn.\n   *\n   * @public\n   * @type {Number}\n   */\n  get resolution () {\n    return this._resolution\n  }\n\n  /**\n   * Set the resolution of the text.\n   *\n   * @public\n   * @type {Number} - The resolution of the text. Defaults to the device pixel ratio.\n   * @throws {TypeError} - If the value is not a number.\n   * @throws {RangeError} - If the value is 0.\n   * @throws {RangeError} - If the value is not a positive number.\n   */\n  set resolution (value) {\n    if (value !== void 0 && Number.isNaN(value)) {\n      throw new TypeError(`${this.constructor.name}: 'resolution' must be a number.`)\n    }\n\n    if (value === 0) {\n      throw new RangeError(`${this.constructor.name}: 'resolution' must be greater than 0.`)\n    }\n\n    value = value || window.devicePixelRatio || 1\n    value = parseFloat(value)\n\n    if (Math.sign(value) === -1) {\n      throw new RangeError(`${this.constructor.name}: 'resolution' must be a positive number.`)\n    }\n\n    this._resolution = value\n\n    return this._resolution\n  }\n\n  /**\n   * Create the canvas element where the text will be drawn.\n   *\n   * @private\n   * @return {HTMLCanvasElement}\n   */\n  createCanvas () {\n    this._canvas = document.createElement('canvas')\n    this._ctx = this._canvas.getContext('2d')\n\n    return this._canvas\n  }\n\n  /**\n   * Apply the selected text styles to the canvas context\n   *\n   * @private\n   */\n  applyStyles () {\n    this._ctx.scale(this._resolution, this._resolution)\n\n    const style = this._style\n\n    this._ctx.font = `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${style.fontSize}px ${style.fontFamily}`\n    this._ctx.textAlign = style.textAlign\n    this._ctx.textBaseline = style.textBaseline\n    this._ctx.fillStyle = style.textColor\n  }\n\n  /**\n   * Wrap the text and create a configuration for each line.\n   *\n   * @private\n   * @return {Array<LineConfig>}\n   */\n  createLines () {\n    // Create lines out of the hard line breaks\n    const forcedLines = this._text.split('\\n')\n\n    if (!this._style.wordWrap) {\n      return forcedLines\n    }\n\n    const spaceMeasure = this._ctx.measureText(' ')\n    const lines = []\n    const lineHeight = this._style.lineHeight || this._style.fontSize * 1.2\n    let currentLine = {\n      text: '',\n      width: 0,\n      height: lineHeight\n    }\n    let lineWords\n    let wordMeasure\n\n    // Wrap each line\n    for (let i = 0; i < forcedLines.length; i++) {\n      lineWords = forcedLines[i].split(' ')\n\n      for (let j = 0; j < lineWords.length; j++) {\n        wordMeasure = this._ctx.measureText(lineWords[j])\n\n        // The word will not fit the current line\n        if (currentLine.width + wordMeasure.width > this._style.wordWrap) {\n          // Only add the word to the next line if there is a previous line\n          if (j && i) {\n            currentLine.text = currentLine.text.trim()\n            currentLine.width -= spaceMeasure.width\n\n            lines.push(currentLine)\n\n            currentLine = {\n              text: '',\n              width: 0,\n              height: lineHeight\n            }\n          }\n\n          currentLine.width = wordMeasure.width + spaceMeasure.width\n          currentLine.text = lineWords[j] + ' '\n        // The word fits the current line\n        } else {\n          currentLine.width += wordMeasure.width + spaceMeasure.width\n          currentLine.text += lineWords[j] + ' '\n        }\n      }\n\n      currentLine.text = currentLine.text.trim()\n      currentLine.width -= spaceMeasure.width\n\n      lines.push(currentLine)\n\n      currentLine = {\n        text: '',\n        width: 0,\n        height: lineHeight\n      }\n    }\n\n    return lines\n  }\n\n  /**\n   * Get the dimensons of the canvas after rendering the text.\n   *\n   * @private\n   * @param {Array<LineConfig>} - The configuration for each line to be rendered.\n   * @return {Object}\n   * @property {Number} width - The width of the canvas.\n   * @property {Number} height - The height of the canvas.\n   */\n  getCanvasDimensions (lines) {\n    let maxWith = 0\n    let maxHeight = 0\n\n    for (let i = 0; i < lines.length; i++) {\n      maxWith = Math.max(maxWith, lines[i].width)\n      maxHeight += lines[i].height\n    }\n\n    return {\n      width: Math.ceil(maxWith),\n      height: Math.ceil(maxHeight)\n    }\n  }\n\n  /**\n   * Render the text to the canvas.\n   *\n   * @public\n   * @return {HTMLCanvasElement} - A canvas element wit the text rendered on it.\n   */\n  render () {\n    this.applyStyles()\n\n    const lines = this.createLines()\n    const dimensions = this.getCanvasDimensions(lines)\n\n    this._canvas.width = (dimensions.width + dimensions.adjustment) * this._resolution\n    this._canvas.height = (dimensions.height + dimensions.adjustment) * this._resolution\n\n    this.applyStyles() // After changing the canvas dimensions the styles get reset\n\n    this._ctx.clearRect(0, 0, dimensions.width, dimensions.height)\n\n    let x = 0\n    let y = 0\n\n    if (this._style.textAlign === 'center') {\n      x = dimensions.width / 2\n    } else if (this._style.textAlign === 'right') {\n      x = dimensions.width\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      y += lines[i].height\n      this._ctx.fillText(lines[i].text, x, y)\n    }\n\n    return this._canvas\n  }\n}\n"],"names":["TextCanvas","text","style","resolution","_style","createCanvas","_canvas","document","createElement","_ctx","getContext","scale","_resolution","font","fontStyle","fontVariant","fontWeight","fontSize","fontFamily","textAlign","textBaseline","fillStyle","textColor","forcedLines","_text","split","wordWrap","spaceMeasure","measureText","lines","lineHeight","currentLine","lineWords","wordMeasure","i","length","j","width","trim","push","maxWith","maxHeight","Math","max","height","ceil","applyStyles","createLines","dimensions","getCanvasDimensions","adjustment","clearRect","x","y","fillText","value","TypeError","constructor","name","RangeError","Number","isNaN","window","devicePixelRatio","parseFloat","sign"],"mappings":"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"}